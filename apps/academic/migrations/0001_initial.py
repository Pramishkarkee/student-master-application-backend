# Generated by Django 3.2.6 on 2021-12-28 08:58

import apps.academic.utils
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('students', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='StudentSop',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now_add=True)),
                ('is_archived', models.BooleanField(default=False)),
                ('document', models.FileField(upload_to=apps.academic.utils.upload_academic_doc_to)),
                ('student', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='students.studentmodel')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='StudentLor',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now_add=True)),
                ('is_archived', models.BooleanField(default=False)),
                ('document', models.FileField(upload_to=apps.academic.utils.upload_academic_doc_to)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='students.studentmodel')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PersonalEssay',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now_add=True)),
                ('is_archived', models.BooleanField(default=False)),
                ('essay', models.FileField(upload_to=apps.academic.utils.upload_academic_doc_to)),
                ('student', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='students.studentmodel')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Academic',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now_add=True)),
                ('is_archived', models.BooleanField(default=False)),
                ('institute_name', models.CharField(max_length=200)),
                ('duration', models.FloatField(blank=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(15.0)])),
                ('level', models.CharField(choices=[('school', 'school'), ('high_school', 'high_school'), ('undergraduate', 'undergraduate'), ('graduate', 'graduate'), ('post_graduate', 'post_graduate')], max_length=200)),
                ('score', models.FloatField()),
                ('full_score', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('marksheet', models.FileField(upload_to=apps.academic.utils.upload_academic_doc_to)),
                ('certificate', models.FileField(upload_to=apps.academic.utils.upload_academic_doc_to)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='students.studentmodel')),
            ],
        ),
        migrations.AddConstraint(
            model_name='academic',
            constraint=models.UniqueConstraint(fields=('student', 'level'), name='student academic'),
        ),
    ]
